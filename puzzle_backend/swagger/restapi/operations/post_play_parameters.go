// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostPlayParams creates a new PostPlayParams object
// no default values defined in spec.
func NewPostPlayParams() PostPlayParams {

	return PostPlayParams{}
}

// PostPlayParams contains all the bound params for the post play operation
// typically these are obtained from a http.Request
//
// swagger:parameters postPlay
type PostPlayParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*user's account private key, hex-encoded
	  Required: true
	  In: query
	*/
	AccountKey string
	/*user's bet, in wei (divide by 10^18 to get HRX)
	  Required: true
	  In: query
	*/
	Stake float64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostPlayParams() beforehand.
func (o *PostPlayParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAccountKey, qhkAccountKey, _ := qs.GetOK("accountKey")
	if err := o.bindAccountKey(qAccountKey, qhkAccountKey, route.Formats); err != nil {
		res = append(res, err)
	}

	qStake, qhkStake, _ := qs.GetOK("stake")
	if err := o.bindStake(qStake, qhkStake, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAccountKey binds and validates parameter AccountKey from query.
func (o *PostPlayParams) bindAccountKey(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("accountKey", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("accountKey", "query", raw); err != nil {
		return err
	}

	o.AccountKey = raw

	return nil
}

// bindStake binds and validates parameter Stake from query.
func (o *PostPlayParams) bindStake(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("stake", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("stake", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("stake", "query", "float64", raw)
	}
	o.Stake = value

	return nil
}
