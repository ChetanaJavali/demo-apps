/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.message.ConsensusRequest', null, global);
goog.exportSymbol('proto.message.DrandRequest', null, global);
goog.exportSymbol('proto.message.LotteryRequest', null, global);
goog.exportSymbol('proto.message.LotteryRequest.Type', null, global);
goog.exportSymbol('proto.message.LotteryResponse', null, global);
goog.exportSymbol('proto.message.Message', null, global);
goog.exportSymbol('proto.message.MessageType', null, global);
goog.exportSymbol('proto.message.ReceiverType', null, global);
goog.exportSymbol('proto.message.Response', null, global);
goog.exportSymbol('proto.message.ServiceType', null, global);
goog.exportSymbol('proto.message.StakingRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.message.Message.oneofGroups_);
};
goog.inherits(proto.message.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.message.Message.displayName = 'proto.message.Message';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.message.Message.oneofGroups_ = [[5,6,7,8]];

/**
 * @enum {number}
 */
proto.message.Message.RequestCase = {
  REQUEST_NOT_SET: 0,
  STAKING: 5,
  CONSENSUS: 6,
  DRAND: 7,
  LOTTERY_REQUEST: 8
};

/**
 * @return {proto.message.Message.RequestCase}
 */
proto.message.Message.prototype.getRequestCase = function() {
  return /** @type {proto.message.Message.RequestCase} */(jspb.Message.computeOneofCase(this, proto.message.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.message.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    receiverType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serviceType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    signature: msg.getSignature_asB64(),
    staking: (f = msg.getStaking()) && proto.message.StakingRequest.toObject(includeInstance, f),
    consensus: (f = msg.getConsensus()) && proto.message.ConsensusRequest.toObject(includeInstance, f),
    drand: (f = msg.getDrand()) && proto.message.DrandRequest.toObject(includeInstance, f),
    lotteryRequest: (f = msg.getLotteryRequest()) && proto.message.LotteryRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.Message}
 */
proto.message.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.Message;
  return proto.message.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.Message}
 */
proto.message.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.message.ReceiverType} */ (reader.readEnum());
      msg.setReceiverType(value);
      break;
    case 2:
      var value = /** @type {!proto.message.ServiceType} */ (reader.readEnum());
      msg.setServiceType(value);
      break;
    case 3:
      var value = /** @type {!proto.message.MessageType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 5:
      var value = new proto.message.StakingRequest;
      reader.readMessage(value,proto.message.StakingRequest.deserializeBinaryFromReader);
      msg.setStaking(value);
      break;
    case 6:
      var value = new proto.message.ConsensusRequest;
      reader.readMessage(value,proto.message.ConsensusRequest.deserializeBinaryFromReader);
      msg.setConsensus(value);
      break;
    case 7:
      var value = new proto.message.DrandRequest;
      reader.readMessage(value,proto.message.DrandRequest.deserializeBinaryFromReader);
      msg.setDrand(value);
      break;
    case 8:
      var value = new proto.message.LotteryRequest;
      reader.readMessage(value,proto.message.LotteryRequest.deserializeBinaryFromReader);
      msg.setLotteryRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceiverType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getServiceType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getStaking();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.message.StakingRequest.serializeBinaryToWriter
    );
  }
  f = message.getConsensus();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.message.ConsensusRequest.serializeBinaryToWriter
    );
  }
  f = message.getDrand();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.message.DrandRequest.serializeBinaryToWriter
    );
  }
  f = message.getLotteryRequest();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.message.LotteryRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReceiverType receiver_type = 1;
 * @return {!proto.message.ReceiverType}
 */
proto.message.Message.prototype.getReceiverType = function() {
  return /** @type {!proto.message.ReceiverType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.message.ReceiverType} value */
proto.message.Message.prototype.setReceiverType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ServiceType service_type = 2;
 * @return {!proto.message.ServiceType}
 */
proto.message.Message.prototype.getServiceType = function() {
  return /** @type {!proto.message.ServiceType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.message.ServiceType} value */
proto.message.Message.prototype.setServiceType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional MessageType type = 3;
 * @return {!proto.message.MessageType}
 */
proto.message.Message.prototype.getType = function() {
  return /** @type {!proto.message.MessageType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.message.MessageType} value */
proto.message.Message.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bytes signature = 4;
 * @return {!(string|Uint8Array)}
 */
proto.message.Message.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes signature = 4;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.message.Message.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.message.Message.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.message.Message.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional StakingRequest staking = 5;
 * @return {?proto.message.StakingRequest}
 */
proto.message.Message.prototype.getStaking = function() {
  return /** @type{?proto.message.StakingRequest} */ (
    jspb.Message.getWrapperField(this, proto.message.StakingRequest, 5));
};


/** @param {?proto.message.StakingRequest|undefined} value */
proto.message.Message.prototype.setStaking = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.message.Message.oneofGroups_[0], value);
};


proto.message.Message.prototype.clearStaking = function() {
  this.setStaking(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.Message.prototype.hasStaking = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ConsensusRequest consensus = 6;
 * @return {?proto.message.ConsensusRequest}
 */
proto.message.Message.prototype.getConsensus = function() {
  return /** @type{?proto.message.ConsensusRequest} */ (
    jspb.Message.getWrapperField(this, proto.message.ConsensusRequest, 6));
};


/** @param {?proto.message.ConsensusRequest|undefined} value */
proto.message.Message.prototype.setConsensus = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.message.Message.oneofGroups_[0], value);
};


proto.message.Message.prototype.clearConsensus = function() {
  this.setConsensus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.Message.prototype.hasConsensus = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional DrandRequest drand = 7;
 * @return {?proto.message.DrandRequest}
 */
proto.message.Message.prototype.getDrand = function() {
  return /** @type{?proto.message.DrandRequest} */ (
    jspb.Message.getWrapperField(this, proto.message.DrandRequest, 7));
};


/** @param {?proto.message.DrandRequest|undefined} value */
proto.message.Message.prototype.setDrand = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.message.Message.oneofGroups_[0], value);
};


proto.message.Message.prototype.clearDrand = function() {
  this.setDrand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.Message.prototype.hasDrand = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional LotteryRequest lottery_request = 8;
 * @return {?proto.message.LotteryRequest}
 */
proto.message.Message.prototype.getLotteryRequest = function() {
  return /** @type{?proto.message.LotteryRequest} */ (
    jspb.Message.getWrapperField(this, proto.message.LotteryRequest, 8));
};


/** @param {?proto.message.LotteryRequest|undefined} value */
proto.message.Message.prototype.setLotteryRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.message.Message.oneofGroups_[0], value);
};


proto.message.Message.prototype.clearLotteryRequest = function() {
  this.setLotteryRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.Message.prototype.hasLotteryRequest = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.message.Response.oneofGroups_);
};
goog.inherits(proto.message.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.message.Response.displayName = 'proto.message.Response';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.message.Response.oneofGroups_ = [[4]];

/**
 * @enum {number}
 */
proto.message.Response.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  LOTTERY_RESPONSE: 4
};

/**
 * @return {proto.message.Response.ResponseCase}
 */
proto.message.Response.prototype.getResponseCase = function() {
  return /** @type {proto.message.Response.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.message.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.message.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    receiverType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serviceType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    lotteryResponse: (f = msg.getLotteryResponse()) && proto.message.LotteryResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.Response}
 */
proto.message.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.Response;
  return proto.message.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.Response}
 */
proto.message.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.message.ReceiverType} */ (reader.readEnum());
      msg.setReceiverType(value);
      break;
    case 2:
      var value = /** @type {!proto.message.ServiceType} */ (reader.readEnum());
      msg.setServiceType(value);
      break;
    case 3:
      var value = /** @type {!proto.message.MessageType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.message.LotteryResponse;
      reader.readMessage(value,proto.message.LotteryResponse.deserializeBinaryFromReader);
      msg.setLotteryResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceiverType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getServiceType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getLotteryResponse();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.message.LotteryResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReceiverType receiver_type = 1;
 * @return {!proto.message.ReceiverType}
 */
proto.message.Response.prototype.getReceiverType = function() {
  return /** @type {!proto.message.ReceiverType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.message.ReceiverType} value */
proto.message.Response.prototype.setReceiverType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ServiceType service_type = 2;
 * @return {!proto.message.ServiceType}
 */
proto.message.Response.prototype.getServiceType = function() {
  return /** @type {!proto.message.ServiceType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.message.ServiceType} value */
proto.message.Response.prototype.setServiceType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional MessageType type = 3;
 * @return {!proto.message.MessageType}
 */
proto.message.Response.prototype.getType = function() {
  return /** @type {!proto.message.MessageType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.message.MessageType} value */
proto.message.Response.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional LotteryResponse lottery_response = 4;
 * @return {?proto.message.LotteryResponse}
 */
proto.message.Response.prototype.getLotteryResponse = function() {
  return /** @type{?proto.message.LotteryResponse} */ (
    jspb.Message.getWrapperField(this, proto.message.LotteryResponse, 4));
};


/** @param {?proto.message.LotteryResponse|undefined} value */
proto.message.Response.prototype.setLotteryResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.message.Response.oneofGroups_[0], value);
};


proto.message.Response.prototype.clearLotteryResponse = function() {
  this.setLotteryResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.Response.prototype.hasLotteryResponse = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.LotteryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.message.LotteryResponse.repeatedFields_, null);
};
goog.inherits(proto.message.LotteryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.message.LotteryResponse.displayName = 'proto.message.LotteryResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.message.LotteryResponse.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.LotteryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.message.LotteryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.LotteryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.LotteryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    playersList: jspb.Message.getRepeatedField(msg, 2),
    balancesList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.LotteryResponse}
 */
proto.message.LotteryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.LotteryResponse;
  return proto.message.LotteryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.LotteryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.LotteryResponse}
 */
proto.message.LotteryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addPlayers(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addBalances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.LotteryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.LotteryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.LotteryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.LotteryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getBalancesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * repeated string players = 2;
 * @return {!Array<string>}
 */
proto.message.LotteryResponse.prototype.getPlayersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.message.LotteryResponse.prototype.setPlayersList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.message.LotteryResponse.prototype.addPlayers = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.message.LotteryResponse.prototype.clearPlayersList = function() {
  this.setPlayersList([]);
};


/**
 * repeated string balances = 3;
 * @return {!Array<string>}
 */
proto.message.LotteryResponse.prototype.getBalancesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.message.LotteryResponse.prototype.setBalancesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.message.LotteryResponse.prototype.addBalances = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.message.LotteryResponse.prototype.clearBalancesList = function() {
  this.setBalancesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.LotteryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.message.LotteryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.message.LotteryRequest.displayName = 'proto.message.LotteryRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.LotteryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.message.LotteryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.LotteryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.LotteryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    privateKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.LotteryRequest}
 */
proto.message.LotteryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.LotteryRequest;
  return proto.message.LotteryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.LotteryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.LotteryRequest}
 */
proto.message.LotteryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.message.LotteryRequest.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivateKey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.LotteryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.LotteryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.LotteryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.LotteryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPrivateKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.message.LotteryRequest.Type = {
  ENTER: 0,
  RESULT: 1,
  PICK_WINNER: 2
};

/**
 * optional Type type = 1;
 * @return {!proto.message.LotteryRequest.Type}
 */
proto.message.LotteryRequest.prototype.getType = function() {
  return /** @type {!proto.message.LotteryRequest.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.message.LotteryRequest.Type} value */
proto.message.LotteryRequest.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string private_key = 2;
 * @return {string}
 */
proto.message.LotteryRequest.prototype.getPrivateKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.message.LotteryRequest.prototype.setPrivateKey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 amount = 3;
 * @return {number}
 */
proto.message.LotteryRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.message.LotteryRequest.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.StakingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.message.StakingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.message.StakingRequest.displayName = 'proto.message.StakingRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.StakingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.message.StakingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.StakingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.StakingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: msg.getTransaction_asB64(),
    nodeId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.StakingRequest}
 */
proto.message.StakingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.StakingRequest;
  return proto.message.StakingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.StakingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.StakingRequest}
 */
proto.message.StakingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransaction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.StakingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.StakingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.StakingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.StakingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes transaction = 1;
 * @return {!(string|Uint8Array)}
 */
proto.message.StakingRequest.prototype.getTransaction = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes transaction = 1;
 * This is a type-conversion wrapper around `getTransaction()`
 * @return {string}
 */
proto.message.StakingRequest.prototype.getTransaction_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransaction()));
};


/**
 * optional bytes transaction = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransaction()`
 * @return {!Uint8Array}
 */
proto.message.StakingRequest.prototype.getTransaction_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransaction()));
};


/** @param {!(string|Uint8Array)} value */
proto.message.StakingRequest.prototype.setTransaction = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string node_id = 2;
 * @return {string}
 */
proto.message.StakingRequest.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.message.StakingRequest.prototype.setNodeId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.ConsensusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.message.ConsensusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.message.ConsensusRequest.displayName = 'proto.message.ConsensusRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.ConsensusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.message.ConsensusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.ConsensusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.ConsensusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    consensusId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    blockHash: msg.getBlockHash_asB64(),
    senderId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.ConsensusRequest}
 */
proto.message.ConsensusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.ConsensusRequest;
  return proto.message.ConsensusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.ConsensusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.ConsensusRequest}
 */
proto.message.ConsensusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConsensusId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSenderId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.ConsensusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.ConsensusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.ConsensusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.ConsensusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConsensusId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSenderId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional uint32 consensus_id = 1;
 * @return {number}
 */
proto.message.ConsensusRequest.prototype.getConsensusId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.message.ConsensusRequest.prototype.setConsensusId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes block_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.message.ConsensusRequest.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes block_hash = 2;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.message.ConsensusRequest.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.message.ConsensusRequest.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.message.ConsensusRequest.prototype.setBlockHash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 sender_id = 3;
 * @return {number}
 */
proto.message.ConsensusRequest.prototype.getSenderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.message.ConsensusRequest.prototype.setSenderId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes payload = 4;
 * @return {!(string|Uint8Array)}
 */
proto.message.ConsensusRequest.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes payload = 4;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.message.ConsensusRequest.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.message.ConsensusRequest.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.message.ConsensusRequest.prototype.setPayload = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.DrandRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.message.DrandRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.message.DrandRequest.displayName = 'proto.message.DrandRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.DrandRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.message.DrandRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.DrandRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.DrandRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    senderId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    blockHash: msg.getBlockHash_asB64(),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.DrandRequest}
 */
proto.message.DrandRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.DrandRequest;
  return proto.message.DrandRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.DrandRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.DrandRequest}
 */
proto.message.DrandRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSenderId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.DrandRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.DrandRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.DrandRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.DrandRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional uint32 sender_id = 1;
 * @return {number}
 */
proto.message.DrandRequest.prototype.getSenderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.message.DrandRequest.prototype.setSenderId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes block_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.message.DrandRequest.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes block_hash = 2;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.message.DrandRequest.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.message.DrandRequest.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.message.DrandRequest.prototype.setBlockHash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes payload = 3;
 * @return {!(string|Uint8Array)}
 */
proto.message.DrandRequest.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes payload = 3;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.message.DrandRequest.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.message.DrandRequest.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.message.DrandRequest.prototype.setPayload = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.message.ReceiverType = {
  NEWNODE: 0,
  LEADER: 1,
  VALIDATOR: 2,
  CLIENT: 3,
  LEADER_OR_VALIDATOR: 4
};

/**
 * @enum {number}
 */
proto.message.ServiceType = {
  CONSENSUS: 0,
  STAKING: 1,
  DRAND: 2,
  CLIENT_SUPPORT: 3
};

/**
 * @enum {number}
 */
proto.message.MessageType = {
  NEWNODE_BEACON_STAKING: 0,
  ANNOUNCE: 1,
  PREPARE: 2,
  PREPARED: 3,
  COMMIT: 4,
  COMMITTED: 5,
  DRAND_INIT: 6,
  DRAND_COMMIT: 7,
  LOTTERY_REQUEST: 8
};

goog.object.extend(exports, proto.message);
