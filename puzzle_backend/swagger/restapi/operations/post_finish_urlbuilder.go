// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// PostFinishURL generates an URL for the post finish operation
type PostFinishURL struct {
	Height   *int64
	Key      *string
	LastPos  *int64
	Level    *int64
	Sequence *string
	Txid     *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *PostFinishURL) WithBasePath(bp string) *PostFinishURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *PostFinishURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *PostFinishURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/finish"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/v1"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var height string
	if o.Height != nil {
		height = swag.FormatInt64(*o.Height)
	}
	if height != "" {
		qs.Set("height", height)
	}

	var key string
	if o.Key != nil {
		key = *o.Key
	}
	if key != "" {
		qs.Set("key", key)
	}

	var lastPos string
	if o.LastPos != nil {
		lastPos = swag.FormatInt64(*o.LastPos)
	}
	if lastPos != "" {
		qs.Set("last_pos", lastPos)
	}

	var level string
	if o.Level != nil {
		level = swag.FormatInt64(*o.Level)
	}
	if level != "" {
		qs.Set("level", level)
	}

	var sequence string
	if o.Sequence != nil {
		sequence = *o.Sequence
	}
	if sequence != "" {
		qs.Set("sequence", sequence)
	}

	var txid string
	if o.Txid != nil {
		txid = *o.Txid
	}
	if txid != "" {
		qs.Set("txid", txid)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *PostFinishURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *PostFinishURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *PostFinishURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on PostFinishURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on PostFinishURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *PostFinishURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
